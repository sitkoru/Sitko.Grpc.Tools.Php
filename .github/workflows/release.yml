name: Release

on:
    push:
        tags:
            - '*.*.*'

jobs:
    build:
        runs-on: self-hosted
        container: ghcr.io/sitkoru/actions-container
        env:
            GRPC_VERSION: v1.32.x
        steps:
            -   uses: actions/checkout@v2
            -   name: Prepare
                id: prep
                shell: bash
                run: |
                    VERSION=${GITHUB_REF#refs/tags/}
                    echo ::set-output name=version::${VERSION}
            -   uses: actions/setup-dotnet@v1
                with:
                    dotnet-version: '3.1.x'
            -   name: Install build dependecies
                run: apt update && apt-get install -y build-essential autoconf libtool pkg-config
            -   name: Clone grpc repo
                uses: actions/checkout@v2
                with:
                    repository: "grpc/grpc"
                    path: tmp/grpc
                    ref: ${{ env.GRPC_VERSION }}
                    submodules: recursive
            -   name: Build grpc_php_plugin
                workging_dir: tmp/grpc
                run: |
                    make grpc_php_plugin
            -   name: Copy gRPC files to project dir
                workging_dir: tmp/grpc
                run: |
                    cp bins/opt/grpc_php_plugin ${{ github.workspace }}/src/Sitko.Grpc.Tools.Php/Tools/grpc_php_client_plugin
                    cp bins/opt/protobuf/protoc ${{ github.workspace }}/src/Sitko.Grpc.Tools.Php/Tools/protoc
                    mkdir -p ${{ github.workspace }}/src/Sitko.Grpc.Tools.Php/Proto/google/protobuf
                    cp third_party/protobuf/src/google/protobuf/*.proto ${{ github.workspace }}/src/Sitko.Grpc.Tools.Php/Proto/google/protobuf
            -   name: Add nuget source
                run: dotnet nuget add source ${{ secrets.NUGET_HOST }} -n ${{ secrets.NUGET_HOST }} --store-password-in-clear-text -u ${{ secrets.NUGET_USER }} -p ${{ secrets.NUGET_PASSWORD }} || true
            -   name: Pack library
                run: dotnet pack -c Release /p:Version=${{ steps.prep.outputs.version }} -o packages
            -   name: Publish nuget package
                run: dotnet nuget push packages/*.nupkg -s ${{ secrets.NUGET_HOST }} -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate
                    
